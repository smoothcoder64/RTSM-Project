# -*- coding: utf-8 -*-
"""RTSM Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eGW2YC90Y7WWMrCQ1u42oGoUjtI-He94
"""

import pandas as pd

# Load datasets
train = pd.read_csv("train.csv")
features = pd.read_csv("features.csv")
stores = pd.read_csv("stores.csv")

train

features

# Merge data
data = pd.merge(train, features, on=["Store", "Date"], how="left")
data = pd.merge(data, stores, on=["Store"], how="left")

# Convert 'Date' to datetime
data["Date"] = pd.to_datetime(data["Date"])
data.sort_values("Date", inplace=True)

data

data = data.drop(columns=['MarkDown1', 'MarkDown2', 'MarkDown3', 'MarkDown4', 'MarkDown5'])
data



"""#Exploratory Data Analysis"""

# Visualizations (example using matplotlib and seaborn)
import matplotlib.pyplot as plt
import seaborn as sns

# Example: Histogram of weekly sales
plt.figure(figsize=(10, 6))
sns.histplot(data['Weekly_Sales'], kde=True)
plt.title('Distribution of Weekly Sales')
plt.xlabel('Weekly Sales')
plt.ylabel('Frequency')
plt.show()

# Example: Box plot of weekly sales by store type
plt.figure(figsize=(10, 6))
sns.boxplot(x='Type', y='Weekly_Sales', data=data)
plt.title('Weekly Sales by Store Type')
plt.xlabel('Store Type')
plt.ylabel('Weekly Sales')
plt.show()

# Example: Scatter plot of weekly sales vs temperature
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Temperature', y='Weekly_Sales', data=data)
plt.title('Weekly Sales vs Temperature')
plt.xlabel('Temperature')
plt.ylabel('Weekly Sales')
plt.show()

# Further EDA based on specific hypotheses or questions
# Example: Analyze sales trends over time
data.groupby('Date')['Weekly_Sales'].sum().plot(figsize=(10, 6))
plt.title('Total Weekly Sales Over Time')
plt.xlabel('Date')
plt.ylabel('Total Weekly Sales')
plt.show()

# Example: Explore relationships between features and sales
# ... add more plots and analyses as needed ...

import matplotlib.pyplot as plt
import seaborn as sns

# Plot weekly sales over time
plt.figure(figsize=(12, 6))
sns.lineplot(x="Date", y="Weekly_Sales", data=data.groupby("Date")["Weekly_Sales"].sum().reset_index())
plt.title("Total Weekly Sales Over Time")
plt.show()

# Correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(data[["Weekly_Sales", "Fuel_Price", "CPI", "Unemployment"]].corr(), annot=True)
plt.title("Correlation Matrix")
plt.show()



"""#Model Fitting"""

from statsmodels.tsa.statespace.sarimax import SARIMAX

# Fit SARIMA (Seasonal ARIMA)
model = SARIMAX(
    data.groupby("Date")["Weekly_Sales"].sum(),
    order=(1, 1, 1),          # Non-seasonal (p,d,q)
    seasonal_order=(1, 1, 1, 52)  # Seasonal (P,D,Q, seasonal_period)
)
results = model.fit()
forecast = results.forecast(steps=12)  # Predict next 12 weeks

# prompt: show the results achieved in the previous code snippet of sarima fitting in a graphical form

# Plot the forecast
plt.figure(figsize=(12, 6))
plt.plot(data.groupby("Date")["Weekly_Sales"].sum(), label='Observed')
plt.plot(forecast, label='Forecast')
plt.title("SARIMA Forecast")
plt.legend()
plt.show()

# Print model diagnostics (optional)
print(results.summary())

test = pd.read_csv('test.csv')

test

